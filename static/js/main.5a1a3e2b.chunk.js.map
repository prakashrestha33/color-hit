{"version":3,"sources":["rain.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","redCnt","blueCnt","greenCnt","yellowCnt","orangeCnt","pinkCnt","IntervalExample","colorValues","colorname","Math","floor","random","length","useState","color","setColor","inlineStyle","backgroundColor","className","useEffect","interval1","setInterval","clearInterval","style","type","App","src","rainbow","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,iLCIvCC,G,MAAS,GACTC,EAAU,EACVC,EAAW,EACXC,EAAY,EACZC,EAAY,EACZC,EAAU,EAGRC,EAAkB,WACtB,IAAMC,EAAc,CAAC,MAAO,OAAQ,QAAS,SAAU,SAAU,QAC3DC,EAAaD,EAAYE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAYK,SAF1C,EAIFC,mBAASL,GAJP,mBAIrBM,EAJqB,KAIdC,EAJc,KAMtBC,EAAc,CAClBC,gBAAgBH,EAChBI,UAAUJ,GAaZ,OAPAK,qBAAU,WACR,IAAMC,EAAYC,aAAY,WAC5BN,GAAS,SAAAP,GAAS,OAAID,EAAYE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAYK,cACxE,MACH,OAAO,kBAAMU,cAAcF,MAC1B,IAGC,yBAAKF,UAAU,OAEX,uBAAGA,UAAW,yBAA0BK,MAAOP,GAAcF,EAA7D,MAAwE,WACpE,OAAQA,GACJ,IAAK,MACD,OAAOd,GAAiB,EAC3B,IAAK,OACF,OAAOC,GAAmB,EAC7B,IAAK,QACF,OAAOC,GAAqB,EAC/B,IAAK,SACF,OAAOC,GAAuB,EAChC,IAAK,SACH,OAAOC,GAAuB,EACjC,IAAK,OACF,OAAOC,GAAmB,GAbkC,IAkB1E,yBAAKa,UAAU,OACb,4BAAQM,KAAK,SAASN,UAAU,8BAA8BlB,GAE9D,4BAAQwB,KAAK,SAASN,UAAU,gCAAgChB,GAEhE,4BAAQsB,KAAK,SAASN,UAAU,+BAA+BjB,IAGjE,yBAAKiB,UAAU,OACb,4BAAQM,KAAK,SAASN,UAAU,iCAAiCd,GAEjE,4BAAQoB,KAAK,SAASN,UAAU,iCAAiCf,GAEjE,4BAAQqB,KAAK,SAASN,UAAU,+BAA+Bb,MA+B1DoB,MAxBf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKQ,IAAKC,IAAST,UAAU,WAAWU,IAAI,SAC5C,+CAGE,0EACF,kBAAC,EAAD,SCvEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a1a3e2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.3c70fa8f.svg\";","import React,{ useState, useEffect } from 'react';\nimport rainbow from './rain.svg';\nimport './App.css';\n\nvar redCnt = 0;\nvar blueCnt = 0;\nvar greenCnt = 0;\nvar yellowCnt = 0;\nvar orangeCnt = 0;\nvar pinkCnt = 0;\n\n\nconst IntervalExample = () => {\n  const colorValues = [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Pink\"];\n  const colorname =  colorValues[Math.floor(Math.random() * colorValues.length)];\n\n  const [color, setColor] = useState(colorname);\n\n  const inlineStyle = {\n    backgroundColor:color,\n    className:color\n  };\n\n\n\n\n  useEffect(() => {\n    const interval1 = setInterval(() => {\n      setColor(colorname => colorValues[Math.floor(Math.random() * colorValues.length)] );\n    }, 1500);\n    return () => clearInterval(interval1);\n  }, []);\n\n  return (\n      <div className=\"App\">\n\n          <p className={'btn  btn-circle btn-cl'} style={inlineStyle}>{color} = {(() => {\n              switch (color) {\n                  case \"Red\": {\n                      return redCnt = redCnt+ 1;\n                  }case \"Blue\": {\n                      return blueCnt = blueCnt+ 1;\n                  }case \"Green\": {\n                      return greenCnt = greenCnt+ 1;\n                  }case \"Yellow\": {\n                      return yellowCnt = yellowCnt+ 1;\n                  } case \"Orange\": {\n                      return orangeCnt = orangeCnt+ 1;\n                  }case \"Pink\": {\n                      return pinkCnt = pinkCnt+ 1;\n                  }\n              }\n          })()}</p>\n\n        <div className=\"row\">\n          <button type=\"button\" className=\"btn  btn-circle btn-xl red\">{redCnt}\n          </button>\n          <button type=\"button\" className=\"btn  btn-circle btn-xl green\">{greenCnt}\n          </button>\n          <button type=\"button\" className=\"btn  btn-circle btn-xl blue\">{blueCnt}\n          </button>\n        </div>\n        <div className=\"row\">\n          <button type=\"button\" className=\"btn  btn-circle btn-xl orange\">{orangeCnt}\n          </button>\n          <button type=\"button\" className=\"btn  btn-circle btn-xl yellow\">{yellowCnt}\n          </button>\n          <button type=\"button\" className=\"btn  btn-circle btn-xl pink\">{pinkCnt}\n          </button>\n        </div>\n      </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={rainbow} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         Your lucky color\n        </p>\n          <small>Highest color count is the lucky color.</small>\n        <IntervalExample/>\n\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"#\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Start*/}\n        {/*</a>*/}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}